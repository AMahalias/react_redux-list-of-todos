{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","ALL","value","filterReducer","todos","loading","error","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","useState","isNotFilteredTodos","setIsNotFilteredTodos","lowerQuery","toLowerCase","visibleTodos","ACTIVE","completed","title","includes","COMPLETED","useEffect","length","className","map","id","classNames","onClick","currentTodoActions","setTodo","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","user","setUser","getUserFromServer","a","userFromServer","Error","href","email","name","App","loadTodos","todosActions","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e799bc7f.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterState = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: FilterState = {\n  query: '',\n  status: Status.ALL,\n};\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: value,\n});\nconst clearQuery = (): SetClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype Action = SetQueryAction | SetClearQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodosState = {\n  todos: Todo[];\n  loading: boolean;\n  error: string;\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  loading: false,\n  error: '',\n};\n\ntype SetTodosAction = { type: 'todos/SET', payload: TodosState['todos'] };\ntype SetTodosLoading = {\n  type: 'todos/LOADING',\n  payload: TodosState['loading'],\n};\ntype SetTodosError = { type: 'todos/ERROR', payload: TodosState['error'] };\n\ntype Action = SetTodosAction | SetTodosLoading | SetTodosError;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\nconst setLoading = (value: boolean): SetTodosLoading => ({\n  type: 'todos/LOADING',\n  payload: value,\n});\nconst setError = (value: string): SetTodosError => ({\n  type: 'todos/ERROR',\n  payload: value,\n});\n\nexport const actions = { setTodos, setLoading, setError };\n\nconst todosReducer = (\n  state: TodosState = initialState,\n  action: Action,\n): TodosState => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case 'todos/LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case 'todos/ERROR':\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { todos } = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const [isNotFilteredTodos, setIsNotFilteredTodos] = useState(false);\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const lowerQuery = query.toLowerCase();\n\n  const visibleTodos = todos.filter(todo => {\n    switch (status) {\n      case Status.ACTIVE:\n        return !todo.completed && todo.title.toLowerCase().includes(lowerQuery);\n\n      case Status.COMPLETED:\n        return todo.completed && todo.title.toLowerCase().includes(lowerQuery);\n\n      case Status.ALL:\n      default:\n        return todo && todo.title.toLowerCase().includes(lowerQuery);\n    }\n  });\n\n  useEffect(() => {\n    setIsNotFilteredTodos(!visibleTodos.length);\n  }, [visibleTodos.length]);\n\n  return (\n    <>\n      {isNotFilteredTodos\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => {\n                const { id, title, completed } = todo;\n\n                return (\n                  <tr\n                    key={id}\n                    data-cy=\"todo\"\n                    className={classNames(\n                      { 'has-background-info-light': id === currentTodo?.id },\n                    )}\n                  >\n                    <td className=\"is-vcentered\">{id}</td>\n\n                    <td className=\"is-vcentered\">\n                      {completed && (\n                        <span className=\"icon\" data-cy=\"iconCompleted\">\n                          <i className=\"fas fa-check\" />\n                        </span>\n                      )}\n                    </td>\n\n                    <td className=\"is-vcentered is-expanded\">\n                      <p className={classNames({\n                        'has-text-success': completed,\n                        'has-text-danger': !completed,\n                      })}\n                      >\n                        {title}\n                      </p>\n                    </td>\n\n                    <td className=\"has-text-right is-vcentered\">\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => setTodo(todo)}\n                      >\n                        <span className=\"icon\">\n                          <i className={classNames('far',\n                            (id === currentTodo?.id)\n                              ? 'fa-eye-slash'\n                              : 'fa-eye')}\n                          />\n                        </span>\n                      </button>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React, { ChangeEvent, FormEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => (\n    event.preventDefault()\n  );\n\n  const handleQuery = (event: ChangeEvent<HTMLInputElement>) => (\n    dispatch(filterActions.setQuery(event.target.value))\n  );\n\n  const handleStatus = (event: ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const clearQuery = () => dispatch(filterActions.clearQuery());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = todo as Todo;\n\n  const remove = () => dispatch(currentTodoActions.removeTodo());\n\n  const getUserFromServer = async () => {\n    try {\n      if (!todo) {\n        return;\n      }\n\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      throw new Error('There is not found chosen user');\n    }\n  };\n\n  getUserFromServer();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={remove}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { loading, error } = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    dispatch(todosActions.setLoading(true));\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    } catch {\n      dispatch(todosActions.setError('There is a problem with loading todos'));\n    } finally {\n      dispatch(todosActions.setLoading(false));\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            {loading\n              ? <Loader />\n              : (\n                <>\n                  <div className=\"block\">\n                    <TodoFilter />\n                  </div>\n\n                  <div className=\"block\">\n                    <TodoList />\n                  </div>\n                </>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}