{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","query","status","value","filterReducer","todos","loading","error","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","useState","isNotFilteredTodos","setIsNotFilteredTodos","lowerQuery","toLowerCase","visibleTodos","completed","title","includes","useEffect","length","className","map","id","classNames","onClick","currentTodoActions","setTodo","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","user","setUser","getUserFromServer","a","userFromServer","Error","href","email","name","App","loadTodos","todosActions","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA6BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAEhB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OC9BPE,EAA4B,CAChCC,MAAO,GACPC,OAAQ,OAiBGT,EAVI,SAACU,GAAD,MAAoC,CACnDR,KAAM,mBACNC,QAASO,IAQEV,EANM,iBAA4B,CAAEE,KAAM,uBAM1CF,EALK,SAACS,GAAD,MAAsC,CACtDP,KAAM,gBACNC,QAASM,IAmCIE,EA5BO,WAGH,IAFjBN,EAEgB,uDAFKE,EACrBD,EACgB,uCAChB,OAAQA,EAAOJ,MACb,IAAK,mBACH,OAAO,2BACFG,GADL,IAEEG,MAAOF,EAAOH,UAGlB,IAAK,gBACH,OAAO,2BACFE,GADL,IAEEI,OAAQH,EAAOH,UAGnB,IAAK,qBACH,OAAO,2BACFE,GADL,IAEEG,MAAO,KAGX,QACE,OAAOH,IC9CPE,EAA2B,CAC/BK,MAAO,GACPC,SAAS,EACTC,MAAO,IAyBId,EAbI,SAACY,GAAD,MAAoC,CACnDV,KAAM,YACNC,QAASS,IAWEZ,EATM,SAACU,GAAD,MAAsC,CACvDR,KAAM,gBACNC,QAASO,IAOEV,EALI,SAACU,GAAD,MAAmC,CAClDR,KAAM,cACNC,QAASO,IAiCIK,EA5BM,WAGH,IAFhBV,EAEe,uDAFKE,EACpBD,EACe,uCACf,OAAQA,EAAOJ,MACb,IAAK,YACH,OAAO,2BACFG,GADL,IAEEO,MAAON,EAAOH,UAGlB,IAAK,gBACH,OAAO,2BACFE,GADL,IAEEQ,QAASP,EAAOH,UAGpB,IAAK,cACH,OAAO,2BACFE,GADL,IAEES,MAAOR,EAAOH,UAGlB,QACE,OAAOE,ICtDPW,EAAcC,0BAAgB,CAClCC,YAAad,EACbe,OAAQR,EACRC,MAAOG,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oECfPC,EAAoCC,IACpCC,EAAkDC,I,OCGlDC,EAAqB,WAChC,IAAMC,EAAWL,IACXP,EAAcS,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAC1CN,EAAUe,GAAe,SAAAtB,GAAK,OAAIA,EAAMO,SAAxCA,MACR,EAA0Be,GAAe,SAAAtB,GAAK,OAAIA,EAAMc,UAAhDX,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACf,EAAoDsB,oBAAS,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KAIMC,EAAa1B,EAAM2B,cAEnBC,EAAexB,EAAMO,QAAO,SAAAlB,GAChC,OAAQQ,GACN,IAAK,SACH,OAAQR,EAAKoC,WAAapC,EAAKqC,MAAMH,cAAcI,SAASL,GAE9D,IAAK,YACH,OAAOjC,EAAKoC,WAAapC,EAAKqC,MAAMH,cAAcI,SAASL,GAG7D,QACE,OAAOjC,GAAQA,EAAKqC,MAAMH,cAAcI,SAASL,OAYvD,OARAM,qBAAU,WACHJ,EAAaK,OAGhBR,GAAsB,GAFtBA,GAAsB,KAIvB,CAACG,EAAaK,SAGf,mCACGT,EACC,mBAAGU,UAAU,0BAAb,iEAIA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGN,EAAaO,KAAI,SAAA1C,GAChB,IAAQ2C,EAAyB3C,EAAzB2C,GAAIN,EAAqBrC,EAArBqC,MAAOD,EAAcpC,EAAdoC,UAEnB,OACE,qBAEE,UAAQ,OACRK,UAAWG,IACT,CAAE,4BAA6BD,KAAE,OAAK1B,QAAL,IAAKA,OAAL,EAAKA,EAAa0B,MAJvD,UAOE,oBAAIF,UAAU,eAAd,SAA8BE,IAE9B,oBAAIF,UAAU,eAAd,SACGL,GACC,sBAAMK,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWG,IAAW,CACvB,mBAAoBR,EACpB,mBAAoBA,IAFtB,SAKGC,MAIL,oBAAII,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVxC,KAAK,SACL4C,QAAS,kBAtFb,SAAC7C,GAAD,OAAgB6B,EAASiB,EAA2B9C,IAsFjC+C,CAAQ/C,IAJzB,SAME,sBAAMyC,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IAAW,MACtBD,KAAE,OAAK1B,QAAL,IAAKA,OAAL,EAAKA,EAAa0B,IACjB,eACA,oBArCPA,cChEVK,EAAuB,WAClC,IAAMnB,EAAWL,IACjB,EAA0BE,GAAe,SAAAtB,GAAK,OAAIA,EAAMc,UAAhDX,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAgBf,OACE,uBACEiC,UAAU,mBACVQ,SAjBiB,SAACC,GAAD,OACnBA,EAAMC,kBAcN,UAIE,mBAAGV,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRhC,MAAOD,EACP4C,SAhBW,SAACF,GAAD,OACnBrB,EAASwB,EAAwBH,EAAMI,OAAO7C,SAYxC,UAKE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGgC,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRxC,KAAK,OACLwC,UAAU,QACVc,YAAY,YACZ9C,MAAOF,EACP6C,SApCY,SAACF,GAAD,OAClBrB,EAASwB,EAAuBH,EAAMI,OAAO7C,WAqCzC,sBAAMgC,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdlC,GACC,sBAAMkC,UAAU,gBAAgBe,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACRxD,KAAK,SACLwC,UAAU,SACVI,QAzCO,kBAAMhB,EAASwB,iBCTpC,SAASK,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,IAEMC,EAAU,SAACC,GAAD,OAAoBZ,EAAG,iBAAiBY,KCpBlDC,G,MAAmB,kBAC9B,qBAAK9B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCGN+B,EAAsB,WACjC,IAAM3C,EAAWL,IACXxB,EAAO0B,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAC3C,EAAwBa,mBAAsB,MAA9C,mBAAO2C,EAAP,KAAaC,EAAb,KACA,EAKI1E,EAJF2C,EADF,EACEA,GACAN,EAFF,EAEEA,MACAiC,EAHF,EAGEA,OACAlC,EAJF,EAIEA,UAKIuC,EAAiB,uCAAG,4BAAAC,EAAA,kEAEjB5E,EAFiB,iEAMOqE,EAAQC,GANf,OAMhBO,EANgB,OAQtBH,EAAQG,GARc,sDAUhB,IAAIC,MAAM,kCAVM,yDAAH,qDAgBvB,OAFAH,IAGE,sBAAKlC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEbgC,EACA,sBAAKhC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYE,KAIZ,wBACE1C,KAAK,SACLwC,UAAU,SACV,UAAQ,cACRI,QAAS,kBArCAhB,EAASiB,WAyCtB,sBAAKL,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGJ,IAGH,oBAAGI,UAAU,QAAQ,UAAQ,aAA7B,UACGL,EACG,wBAAQK,UAAU,mBAAlB,kBACA,wBAAQA,UAAU,kBAAlB,qBAEH,OAED,mBAAGsC,KAAI,iBAAYN,EAAKO,OAAxB,SACGP,EAAKQ,gBAhCP,cAAC,EAAD,QC5BFC,EAAgB,WAC3B,IAAMrD,EAAWL,IACjB,EAA2BE,GAAe,SAAAtB,GAAK,OAAIA,EAAMO,SAAjDC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MACXI,EAAcS,GAAe,SAAAtB,GAAK,OAAIA,EAAMa,eAE5CkE,EAAS,uCAAG,4BAAAP,EAAA,6DAChB/C,EAASuD,GAAwB,IADjB,kBHGU1B,EAAY,UGHtB,OAGR2B,EAHQ,OAKdxD,EAASuD,EAAsBC,IALjB,gDAOdxD,EAASuD,EAAsB,0CAPjB,yBASdvD,EAASuD,GAAwB,IATnB,4EAAH,qDAiBf,OAJA7C,qBAAU,WACR4C,MACC,IAECtE,EACK,4BAAIA,IAIX,qCACE,qBAAK4B,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEC7B,EAAU,cAAC,EAAD,IACT,qCACE,qBAAK6B,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,gBAQXxB,GACC,cAAC,EAAD,QCrDFqE,EAAO,kBACX,cAAC,IAAD,CAAUnE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNoE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.38c77626.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FilterState = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: FilterState = {\n  query: '',\n  status: 'all',\n};\n\ntype SetQueryAction = { type: 'filter/SET_QUERY', payload: string };\ntype SetClearQueryAction = { type: 'filter/CLEAR_QUERY' };\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: value,\n});\nconst clearQuery = (): SetClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype Action = SetQueryAction | SetClearQueryAction | SetStatusAction;\n\nconst filterReducer = (\n  state: FilterState = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/CLEAR_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodosState = {\n  todos: Todo[];\n  loading: boolean;\n  error: string;\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  loading: false,\n  error: '',\n};\n\ntype SetTodosAction = { type: 'todos/SET', payload: TodosState['todos'] };\ntype SetTodosLoading = {\n  type: 'todos/LOADING',\n  payload: TodosState['loading'],\n};\ntype SetTodosError = { type: 'todos/ERROR', payload: TodosState['error'] };\n\ntype Action = SetTodosAction | SetTodosLoading | SetTodosError;\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\nconst setLoading = (value: boolean): SetTodosLoading => ({\n  type: 'todos/LOADING',\n  payload: value,\n});\nconst setError = (value: string): SetTodosError => ({\n  type: 'todos/ERROR',\n  payload: value,\n});\n\nexport const actions = { setTodos, setLoading, setError };\n\nconst todosReducer = (\n  state: TodosState = initialState,\n  action: Action,\n): TodosState => {\n  switch (action.type) {\n    case 'todos/SET':\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case 'todos/LOADING':\n      return {\n        ...state,\n        loading: action.payload,\n      };\n\n    case 'todos/ERROR':\n      return {\n        ...state,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { todos } = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const [isNotFilteredTodos, setIsNotFilteredTodos] = useState(false);\n\n  const setTodo = (todo: Todo) => dispatch(currentTodoActions.setTodo(todo));\n\n  const lowerQuery = query.toLowerCase();\n\n  const visibleTodos = todos.filter(todo => {\n    switch (status) {\n      case 'active':\n        return !todo.completed && todo.title.toLowerCase().includes(lowerQuery);\n\n      case 'completed':\n        return todo.completed && todo.title.toLowerCase().includes(lowerQuery);\n\n      case 'all':\n      default:\n        return todo && todo.title.toLowerCase().includes(lowerQuery);\n    }\n  });\n\n  useEffect(() => {\n    if (!visibleTodos.length) {\n      setIsNotFilteredTodos(true);\n    } else {\n      setIsNotFilteredTodos(false);\n    }\n  }, [visibleTodos.length]);\n\n  return (\n    <>\n      {isNotFilteredTodos ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => {\n              const { id, title, completed } = todo;\n\n              return (\n                <tr\n                  key={id}\n                  data-cy=\"todo\"\n                  className={classNames(\n                    { 'has-background-info-light': id === currentTodo?.id },\n                  )}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames({\n                      'has-text-success': completed,\n                      'has-text-danger': !completed,\n                    })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames('far',\n                          (id === currentTodo?.id)\n                            ? 'fa-eye-slash'\n                            : 'fa-eye')}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { ChangeEvent, FormEvent } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => (\n    event.preventDefault()\n  );\n\n  const handleQuery = (event: ChangeEvent<HTMLInputElement>) => (\n    dispatch(filterActions.setQuery(event.target.value))\n  );\n\n  const handleStatus = (event: ChangeEvent<HTMLSelectElement>) => (\n    dispatch(filterActions.setStatus(event.target.value as Status))\n  );\n\n  const clearQuery = () => dispatch(filterActions.clearQuery());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={handleSubmit}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = todo as Todo;\n\n  const remove = () => dispatch(currentTodoActions.removeTodo());\n\n  const getUserFromServer = async () => {\n    try {\n      if (!todo) {\n        return;\n      }\n\n      const userFromServer = await getUser(userId);\n\n      setUser(userFromServer);\n    } catch {\n      throw new Error('There is not found chosen user');\n    }\n  };\n\n  getUserFromServer();\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => remove()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { loading, error } = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = async () => {\n    dispatch(todosActions.setLoading(true));\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    } catch {\n      dispatch(todosActions.setError('There is a problem with loading todos'));\n    } finally {\n      dispatch(todosActions.setLoading(false));\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            {loading ? <Loader /> : (\n              <>\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}